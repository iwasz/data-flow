/*
 * This file was aut-generated by tiliaeparser. Do not modify. Unless.
 * Include only once.
 * https://github.com/iwasz/tiliae
 */

#include <reflection/Reflection.h>
#include "Reflection_input.cc"

namespace {
using namespace Core;
using namespace Reflection;

void createReflectionDatabase_dataFlow ()
{
	{
		Class *clazz = new Class ("Arc", typeid (flow::Arc &), new Reflection::PtrDeleter <flow::Arc>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Arc, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Arc, int>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("isFull", createMethodWrapper (&flow::Arc::isFull)));
			clazz->addMethod (new Method ("get", createMethodWrapper (&flow::Arc::get)));
			clazz->addMethod (new Method ("put", createMethodWrapper (&flow::Arc::put)));
			clazz->addMethod (new Method ("getValue", createMethodWrapper (&flow::Arc::getValue)));
			clazz->addMethod (new Method ("getNodeInputSide", createMethodWrapper (&flow::Arc::getNodeInputSide)));
			clazz->addMethod (new Method ("setNodeInputSide", createMethodWrapper (&flow::Arc::setNodeInputSide)));
			clazz->addMethod (new Method ("getNodeOutputSide", createMethodWrapper (&flow::Arc::getNodeOutputSide)));
			clazz->addMethod (new Method ("setNodeOutputSide", createMethodWrapper (&flow::Arc::setNodeOutputSide)));
			clazz->addMethod (new Method ("disconnect", createMethodWrapper (&flow::Arc::disconnect)));
		}
	}
	{
		Class *clazz = new Class ("Object", typeid (Core::Object &), new Reflection::PtrDeleter <Core::Object>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("INode", typeid (flow::INode &), new Reflection::PtrDeleter <flow::INode>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::INode::process)));
			clazz->addMethod (new Method ("inputsOk", createMethodWrapper (&flow::INode::inputsOk)));
			clazz->addMethod (new Method ("outputsOk", createMethodWrapper (&flow::INode::outputsOk)));
			clazz->addMethod (new Method ("reset", createMethodWrapper (&flow::INode::reset)));
			clazz->addMethod (new Method ("addOutput", createMethodWrapper (&flow::INode::addOutput)));
			clazz->addMethod (new Method ("setInput", createMethodWrapper (&flow::INode::setInput)));
			clazz->addMethod (new Method ("disconnectOutput", createMethodWrapper (&flow::INode::disconnectOutput)));
			clazz->addMethod (new Method ("disconnectInput", createMethodWrapper (&flow::INode::disconnectInput)));
			clazz->addMethod (new Method ("setProgram", createMethodWrapper (&flow::INode::setProgram)));
		}
	}
	{
		Class *clazz = new Class ("Source", typeid (flow::Source &), new Reflection::PtrDeleter <flow::Source>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("INode");
			clazz->addField (new Field ("output", Reflection::createFieldWrapper (&flow::Source::output)));
			clazz->addMethod (new Method ("inputsOk", createMethodWrapper (&flow::Source::inputsOk)));
			clazz->addMethod (new Method ("outputsOk", createMethodWrapper (&flow::Source::outputsOk)));
			clazz->addMethod (new Method ("addOutput", createMethodWrapper (&flow::Source::addOutput)));
			clazz->addMethod (new Method ("setInput", createMethodWrapper (&flow::Source::setInput)));
			clazz->addMethod (new Method ("reset", createMethodWrapper (&flow::Source::reset)));
			clazz->addMethod (new Method ("disconnectOutput", createMethodWrapper (&flow::Source::disconnectOutput)));
			clazz->addMethod (new Method ("disconnectInput", createMethodWrapper (&flow::Source::disconnectInput)));
		}
	}
	{
		Class *clazz = new Class ("Copy", typeid (flow::Copy &), new Reflection::PtrDeleter <flow::Copy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Copy, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::Copy::process)));
		}
	}
	{
		Class *clazz = new Class ("Add", typeid (flow::Add &), new Reflection::PtrDeleter <flow::Add>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Add, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::Add::process)));
		}
	}
	{
		Class *clazz = new Class ("Sub", typeid (flow::Sub &), new Reflection::PtrDeleter <flow::Sub>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Sub, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::Sub::process)));
		}
	}
	{
		Class *clazz = new Class ("Mul", typeid (flow::Mul &), new Reflection::PtrDeleter <flow::Mul>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Mul, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::Mul::process)));
		}
	}
	{
		Class *clazz = new Class ("Div", typeid (flow::Div &), new Reflection::PtrDeleter <flow::Div>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Div, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::Div::process)));
		}
	}
	{
		Class *clazz = new Class ("Console", typeid (flow::Console &), new Reflection::PtrDeleter <flow::Console>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Console, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::Console::process)));
		}
	}
	{
		Class *clazz = new Class ("Const", typeid (flow::Const &), new Reflection::PtrDeleter <flow::Const>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Source");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Const, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Const, int>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::Const::process)));
			clazz->addMethod (new Method ("getValue", createMethodWrapper (&flow::Const::getValue)));
			clazz->addMethod (new Method ("setValue", createMethodWrapper (&flow::Const::setValue)));
			clazz->addMethod (new Method ("isRepeat", createMethodWrapper (&flow::Const::isRepeat)));
			clazz->addMethod (new Method ("setRepeat", createMethodWrapper (&flow::Const::setRepeat)));
			clazz->addMethod (new Method ("reset", createMethodWrapper (&flow::Const::reset)));
		}
	}
	{
		Class *clazz = new Class ("Program", typeid (flow::Program &), new Reflection::PtrDeleter <flow::Program>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Program, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("removeNode", createMethodWrapper (&flow::Program::removeNode)));
			clazz->addMethod (new Method ("addNode", createMethodWrapper (&flow::Program::addNode)));
			clazz->addMethod (new Method ("run", createMethodWrapper (&flow::Program::run)));
			clazz->addMethod (new Method ("step", createMethodWrapper (&flow::Program::step)));
			clazz->addMethod (new Method ("reset", createMethodWrapper (&flow::Program::reset)));
		}
	}
}

struct Sentinel_dataFlow {
        Sentinel_dataFlow ()
        {
                createReflectionDatabase_dataFlow ();
        }
};

static Sentinel_dataFlow sentinel_dataFlow;
} // namespace

